"""
OfferAssembler.py
Combines pricing data and ancillary bundle recommendations into a complete travel offer.
This module aggregates data from Pricing and Ancillary Services and applies personalization rules.
"""

import logging
from models.Offer import Offer

logger = logging.getLogger(__name__)

def assemble_offer(pricing_data, bundle_offer, additional_info=None):
    """
    Combines pricing and ancillary bundle data into a full offer.
    
    Parameters:
      pricing_data (dict): Contains the dynamic fare and related pricing info.
      bundle_offer (dict): Ancillary bundle details generated by the Ancillary Service.
      additional_info (dict, optional): Additional contextual data (e.g., loyalty status, promotions).
      
    Returns:
      Offer: An Offer object representing the complete offer.
    """
    try:
        # Example: The final offer combines base fare and ancillary discounted price.
        final_price = pricing_data.get("fare") + bundle_offer.get("discounted_price", 0)
        offer = Offer(
            base_fare=pricing_data.get("fare"),
            ancillary_bundle=bundle_offer,
            final_offer=final_price,
            additional_info=additional_info
        )
        logger.info(f"Offer assembled successfully: {offer.to_dict()}")
        return offer
    except Exception as e:
        logger.error("Error in OfferAssembler: " + str(e))
        raise e
