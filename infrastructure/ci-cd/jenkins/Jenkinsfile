// Jenkinsfile
// Jenkins pipeline for the Dynamic Fare Adjustment Engine
// This pipeline builds, tests, and deploys all services in parallel.

pipeline {
    agent any
    environment {
        REGISTRY = "myregistry"
        IMAGE_TAG = "latest"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build & Test') {
            parallel {
                stage('Pricing Service') {
                    steps {
                        dir('services/pricing-service') {
                            sh 'docker build -t $REGISTRY/dynamic-fare-adustemnt-engine:pricing-service-$IMAGE_TAG .'
                            sh 'pytest --maxfail=1 --disable-warnings -q'
                        }
                    }
                }
                stage('Forecasting Service') {
                    steps {
                        dir('services/forecasting-service') {
                            sh 'docker build -t $REGISTRY/dynamic-fare-adustemnt-engine:forecasting-service-$IMAGE_TAG .'
                            sh 'pytest --maxfail=1 --disable-warnings -q'
                        }
                    }
                }
                stage('Ancillary Service') {
                    steps {
                        dir('services/ancillary-service') {
                            sh 'docker build -t $REGISTRY/airline-fare-optimization:ancillary-service-$IMAGE_TAG .'
                            sh 'pytest --maxfail=1 --disable-warnings -q'
                        }
                    }
                }
                stage('Offer Service') {
                    steps {
                        dir('services/offer-service') {
                            sh 'docker build -t $REGISTRY/airline-fare-optimization:offer-service-$IMAGE_TAG .'
                            sh 'pytest --maxfail=1 --disable-warnings -q'
                        }
                    }
                }
                // Add additional service build/test stages as needed.
            }
        }
        stage('Deploy') {
            steps {
                // Deploy using kubectl or Helm (example command)
                sh './infrastructure/ci-cd/k8s-deploy.sh'
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: '**/test-reports/**/*'
        }
    }
}
